// Copyright 2020 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package tfx.orchestration.experimental.core;

// A task contains details of the work to be performed by the system and is
// typically generated by the core task generation loop based on the state of
// MLMD db.
message Task {
  oneof task_type {
    // Task for node or sub-pipeline execution.
    ExecTask exec_task = 1;

    // System task (eg: garbage collection)
    SystemTask system_task = 2;
  }
}

// ExecTask contains details of a node or sub-pipeline to be executed. It is
// generated in the task generation loop for both sync and async pipelines once
// the constraints for execution are satisfied (eg: completed execution of all
// upstream nodes for a node in a sync pipeline, availability of all input
// artifacts for a node in an async pipeline, etc). There must be an active
// execution registered in MLMD by the task generator and the execution id
// included.
message ExecTask {
  // Pipeline.pipeline_info.id of the pipeline containing the node or the
  // sub-pipeline to be executed.
  string pipeline_id = 1;

  // PipelineRuntimeSpec.pipeline_run_id of the pipeline being executed. This is
  // set only for sync pipelines.
  string pipeline_run_id = 2;

  oneof node_or_sub_pipeline_id {
    // PipelineNode.node_info.id of the node to be executed.
    string node_id = 3;

    // Pipeline.pipeline_info.id of the sub-pipeline to be executed.
    string sub_pipeline_id = 4;
  }

  // MLMD execution id associated with the current execution task.
  int64 execution_id = 5;
}

// System wide tasks such as garbage collection. TBD.
message SystemTask {
}
